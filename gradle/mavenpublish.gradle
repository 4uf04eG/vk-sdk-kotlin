apply plugin: 'maven-publish'
apply plugin: 'signing'

@SuppressWarnings("GrMethodMayBeStatic")
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

@SuppressWarnings("GrMethodMayBeStatic")
def getReleaseRepositoryUrl() {
    return REPOSITORY_URL_MAVEN_STAGING_DEFAULT
}

@SuppressWarnings("GrMethodMayBeStatic")
def getSnapshotRepositoryUrl() {
    return REPOSITORY_URL_MAVEN_SNAPSHOT_DEFAULT
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRepositoryUsername() {
    return System.getenv("ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME")
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRepositoryPassword() {
    return System.getenv('ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD')
}

task emptySourcesJar(type: Jar) {
    //noinspection GrDeprecatedAPIUsage
    classifier = 'sources'
}
task emptyJavadocJar(type: Jar) {
    //noinspection GrDeprecatedAPIUsage
    classifier = 'javadoc'
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign(publishing.publications)
}

publishing {
    publications.all {
        artifact emptyJavadocJar

        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = DELEGATE_FIRST

                //noinspection GroovyAssignabilityCheck
                description POM_DESCRIPTION
                //noinspection GroovyAssignabilityCheck
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        //noinspection GroovyAssignabilityCheck
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        //noinspection GroovyAssignabilityCheck
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    afterEvaluate {
        // Source jars are only created for platforms, not the common artifact.
        publications.findByName('kotlinMultiplatform')?.artifact emptySourcesJar
    }

    repositories {
        maven {
            Boolean isRelease = isReleaseBuild()
            url isRelease ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
        maven {
            name 'test'
            url file("${rootProject.buildDir}/localMaven").toURI().toString()
        }
    }
}

apply from: rootProject.file("gradle/dokka.gradle")
